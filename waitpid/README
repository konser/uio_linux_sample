1. signal list and kill-mapping-key
  # kill -l
   1) SIGHUP   2) SIGINT   3) SIGQUIT  4) SIGILL   5) SIGTRAP
   6) SIGABRT  7) SIGBUS   8) SIGFPE   
   9) SIGKILL 
  10) SIGUSR1
  11) SIGSEGV 12) SIGUSR2 13) SIGPIPE 14) SIGALRM 
  15) SIGTERM
  16) SIGSTKFLT   
  17) SIGCHLD   ingore default
  18) SIGCONT   continue
  19) SIGSTOP 20) SIGTSTP
  21) SIGTTIN 22) SIGTTOU 23) SIGURG  24) SIGXCPU 25) SIGXFSZ
  26) SIGVTALRM   27) SIGPROF 28) SIGWINCH    29) SIGIO   30) SIGPWR
  31) SIGSYS  34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
  38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
  43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
  48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
  53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
  58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
  63) SIGRTMAX-1  64) SIGRTMAX    

2. zombie task
  has 2 conditon
  1) child is exit before parent
  2) parent can't get status of child (eg. has't call wait or waitpid), 
     child will be zombie
    # gcc -o zom zombie.c
    # kill -9 9531
    # ps -aux |grep 953
    root      9530  0.0  0.0   4172   696 pts/0    S+   17:04   0:00 ./zom
    root      9531  0.0  0.0      0     0 pts/0    Z+   17:04   0:00 [zom] <defunct>

3. waitpid & wait
  #include <sys/wait.h>
  pid_t wait(int * statloc);
  pid_t waitpid(pid_t pid,int *statloc,int options);
  pid:
         < -1: 取该 pid 的绝对值，如果任何子进程的进程组ID等于该值，则该进程组的任一子进程中的进程状态发生变化，都会触发`waitpid`的回调;
        == -1: 监听范围扩大到任意子进程，也就是 wait(status)；
        ==  0: 监听进程组ID和父进程一样的子进程；
         >  0: 监听该pid的子进程；

  options:
        WNOHANG：    调用时，指定的 pid 仍未结束运行，则 wait 立即返回 0；
        WUNTRACED：  当子进程被暂停时，则立即返回子进程的 pid;
        WCONTINUED:  当被暂停的子进程，又被信号恢复时，则立即返回子进程的pid；

4. fork
   at child when ret is 0
   at parent when ret is child pid
